ban_wandering_interaction = {
	category = interaction_category_diplomacy
	common_interaction = yes
	interface_priority = 60
	desc = ban_wandering_interaction_desc

	greeting = positive
	notification_text = BAN_WANDERING_PROPOSAL

	answer_accept_key = BAN_WANDERING_ACCEPT
	answer_reject_key = BAN_WANDERING_REJECT

	cost = {
		prestige = {
			value = 0
			add = {
				value = 50
				desc = PRESTIGE_COST_REASON
			}
		}
	}

	ai_frequency = 60

	is_shown = {
		#prevent player from banning themselfs, this causes problems when they are overthrown
		NOT = {
			scope:recipient = scope:actor
		}
		# make sure the player can only prevent their family or if they're incharge of the person
		OR = {
			#is the person part of their family?
			scope:actor = {
				is_dynast = yes
				dynasty = scope:recipient.dynasty
			}
			# is this person employed in my court? Initiate Wage slavery.
			scope:recipient = {
				is_courtier_of = scope:actor
			}
		}
		# prevent this from being visible if they're already prevent from leaving the cort
		scope:recipient = {
			NOT = { has_character_flag = blocked_from_leaving }
		}
	}

	is_valid_showing_failures_only = {
		#make sure we're not trying to prevent family members 1,000 km away
		scope:recipient = { is_diplomatically_available = yes }
		#make sure we're the house head
		scope:actor.dynasty.house_head = scope:actor
	}

	on_accept = {
		scope:actor = {
			send_interface_message = {
				type = event_generic_neutral
				title = ban_wandering_notification
				right_icon = scope:recipient
				scope:recipient = {
					add_character_flag = { FLAG = blocked_from_leaving }
				}
			}
		}
	}
	
	ai_accept = {
		base = 0
		modifier = {
			add = 100
			desc = REASON_LIEGE
		}
	}
	
	ai_potential = {
		is_adult = yes
	}
	
	auto_accept = {
		custom_description = {
			text = auto_accept_interaction_ai	
			object = scope:recipient
			scope:recipient = {
				is_ai = yes
			}
		}
	}
	
	ai_min_reply_days = 1
	ai_max_reply_days = 1
	
	ai_will_do = {
		base = 100
	}
}

enable_wandering_interaction = {
	category = interaction_category_diplomacy
	common_interaction = yes
	interface_priority = 60
	desc = enable_wandering_interaction_desc

	greeting = positive
	notification_text = ENABLE_WANDERING_PROPOSAL

	answer_accept_key = ENABLE_WANDERING_ACCEPT
	answer_reject_key = ENABLE_WANDERING_REJECT

	cost = {
		prestige = {
			value = 0
			add = {
				#to be replaced with a modifier
				value = 10
				desc = PRESTIGE_COST_REASON
			}
		}
	}
	ai_frequency = 60

	is_shown = {
		#make sure were not removing the flag form ourselfs
		NOT = {
			scope:recipient = scope:actor
		}
		#make sure they're part of our dynasty or enslaved by our wages
		OR = {
			# is this person my family?
			scope:actor = {
				is_dynast = yes
				dynasty = scope:recipient.dynasty
			}
			#is this person a wage slave? Arent we all?
			scope:recipient = {
				is_courtier_of = scope:actor
			}
		}
		# make sure we can only see this, if the person has the flag to begin with...
		scope:recipient = {
			has_character_flag = blocked_from_leaving 
		}
	}

	is_valid_showing_failures_only = {
		#make sure that were not trying to tell a person 1000km away to do soemthing
		scope:recipient = { is_diplomatically_available = yes }
		#make sure we're the house head. No ones going to listen to the drunk uncle who doesnt pay rent for living on the couch
		scope:actor.dynasty.house_head = scope:actor
	}

	on_accept = {
		scope:actor = {
			send_interface_message = {
				type = event_generic_neutral
				title = enable_wandering_notification
				right_icon = scope:recipient
				scope:recipient = {
					remove_character_flag = blocked_from_leaving
				}
			}
		}
	}
	
	ai_accept = {
		base = 0
		modifier = {
			add = 100
			desc = REASON_LIEGE
		}
	}
	
	ai_potential = {
		is_adult = yes
	}
	
	auto_accept = {
		custom_description = {
			text = auto_accept_interaction_ai	
			object = scope:recipient
			scope:recipient = {
				is_ai = yes
			}
		}
	}
	
	ai_min_reply_days = 1
	ai_max_reply_days = 1
	
	ai_will_do = {
		base = 100
	}
}
